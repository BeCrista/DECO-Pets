// <auto-generated />
using System;
using DECO_Pets.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DECO_Pets.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230814114026_UpdateRaceTable")]
    partial class UpdateRaceTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DECO_Pets.Models.Age", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AgeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Ages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AgeDescription = "Entre 0 e 6 Meses"
                        },
                        new
                        {
                            ID = 2,
                            AgeDescription = "Entre 6 Meses e 1,5 Anos"
                        },
                        new
                        {
                            ID = 3,
                            AgeDescription = "Entre 1,5 Anos e 2 Anos"
                        },
                        new
                        {
                            ID = 4,
                            AgeDescription = "Entre 2 e 4 Anos"
                        },
                        new
                        {
                            ID = 5,
                            AgeDescription = "Entre 4 e 6 Anos"
                        },
                        new
                        {
                            ID = 6,
                            AgeDescription = "Entre 6 e 7 Anos"
                        },
                        new
                        {
                            ID = 7,
                            AgeDescription = "Entre 7 e 8 Anos"
                        });
                });

            modelBuilder.Entity("DECO_Pets.Models.Dados", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AgeID")
                        .HasColumnType("int");

                    b.Property<int>("RaceID")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesID")
                        .HasColumnType("int");

                    b.Property<int?>("WeightID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AgeID");

                    b.HasIndex("RaceID");

                    b.HasIndex("SpeciesID");

                    b.HasIndex("WeightID");

                    b.ToTable("Dados");
                });

            modelBuilder.Entity("DECO_Pets.Models.Premios", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DadosID")
                        .HasColumnType("int");

                    b.Property<int>("Premio")
                        .HasColumnType("int");

                    b.Property<int>("SeguradoraID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DadosID");

                    b.HasIndex("SeguradoraID");

                    b.ToTable("Premios");
                });

            modelBuilder.Entity("DECO_Pets.Models.Race", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EspeciesID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EspeciesID");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Descricao = "Sem raça definida",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 2,
                            Descricao = "Beagle",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 3,
                            Descricao = "Bichon Maltês",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 4,
                            Descricao = "Border Collie",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 5,
                            Descricao = "Bouledogue Francês",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 6,
                            Descricao = "Boxer",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 7,
                            Descricao = "Poodle",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 8,
                            Descricao = "Cão da Serra da Estrela",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 9,
                            Descricao = "Cão de Água Português",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 10,
                            Descricao = "Pastor Alemão",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 11,
                            Descricao = "Chihuahua",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 12,
                            Descricao = "Chow-Chow",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 13,
                            Descricao = "Cocker Spaniel Inglês",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 14,
                            Descricao = "Golden Retriever",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 15,
                            Descricao = "Jack Russel Terrier",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 16,
                            Descricao = "Labrador Retriever",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 17,
                            Descricao = "Pinscher Miniatura",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 18,
                            Descricao = "Podengo Português",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 19,
                            Descricao = "Spitz Alemão",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 20,
                            Descricao = "Yorkshire Terrier",
                            EspeciesID = 1
                        },
                        new
                        {
                            ID = 21,
                            Descricao = "Europeu comum/Sem raça definida",
                            EspeciesID = 2
                        },
                        new
                        {
                            ID = 22,
                            Descricao = "Britânico Pêlo Longo",
                            EspeciesID = 2
                        },
                        new
                        {
                            ID = 23,
                            Descricao = "Gato Bosques da Noruega",
                            EspeciesID = 2
                        },
                        new
                        {
                            ID = 24,
                            Descricao = "Maine Coon",
                            EspeciesID = 2
                        },
                        new
                        {
                            ID = 25,
                            Descricao = "Persa",
                            EspeciesID = 2
                        },
                        new
                        {
                            ID = 26,
                            Descricao = "Siamês",
                            EspeciesID = 2
                        },
                        new
                        {
                            ID = 27,
                            Descricao = "Sphynx",
                            EspeciesID = 2
                        });
                });

            modelBuilder.Entity("DECO_Pets.Models.Seguradora", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Cirurgia_Franquia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cirurgia_LimiteAnual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coberturas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desaparecimento_Franquia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desaparecimento_LimiteAnual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Despesas_Veterinarias_Franquia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Despesas_Veterinarias_LimiteAnual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destaque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eutanasia_Funeral_Franquia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eutanasia_Funeral_LimiteAnual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guarda_Franquia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guarda_LimiteAnual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagemSeguradora")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qualidade")
                        .HasColumnType("int");

                    b.Property<string>("QualidadeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsabilidade_Civil_Franquia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsabilidade_Civil_LimiteAnual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vacinas_Franquia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vacinas_LimiteAnual")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Seguradoras");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Cirurgia_Franquia = "10% rede, 30% fora rede",
                            Cirurgia_LimiteAnual = "Por doença: 500 €. Por acidente: 500 €",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Despesas médicas por acidente, Cirurgia, Eutanásia, Desaparecimento e Guarda do animal",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6184),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "100 €",
                            Designacao = "Netanimais Domésticos @Maxi",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Por doença: acesso à rede. Por acidente: 500 €",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "Sem franquia",
                            Eutanasia_Funeral_LimiteAnual = "200 €",
                            Guarda_Franquia = "Sem franquia",
                            Guarda_LimiteAnual = "300 €",
                            ImagemSeguradora = "",
                            Nome = "Mapfre",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 78,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "50 €",
                            Responsabilidade_Civil_LimiteAnual = "100.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Cobertura opcional"
                        },
                        new
                        {
                            ID = 2,
                            Cirurgia_Franquia = "10% rede, 30% fora rede",
                            Cirurgia_LimiteAnual = "Por doença: 500 €. Por acidente: 500 €",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Cirurgia, Funeral, Desaparecimento e Guarda do Animal",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6260),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "100 €",
                            Designacao = "Cães e Gatos Pleno",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Acesso à rede",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "Sem franquia",
                            Eutanasia_Funeral_LimiteAnual = "300 €",
                            Guarda_Franquia = "Sem franquia",
                            Guarda_LimiteAnual = "300 €",
                            ImagemSeguradora = "",
                            Nome = "Seguros Continente",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 78,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "50 €",
                            Responsabilidade_Civil_LimiteAnual = "100.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Oferta vacina anual"
                        },
                        new
                        {
                            ID = 3,
                            Cirurgia_Franquia = "10 ou 30%, consoante o tipo de cirurgia",
                            Cirurgia_LimiteAnual = "6.500 € por sinistro e 20.000 € por anuidade; Limites máximos por tipo de cirurgia",
                            Coberturas = "Responsabilidade Civil, Despesas médicas, Cirurgia, Despesas de internamento, Eutanásia, Desaparecimento e Guarda do Animal",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6266),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "500 €; Máx. 30 dias",
                            Designacao = "Petki Platinum",
                            Despesas_Veterinarias_Franquia = "Franquia variável com o tipo de consulta ou exame",
                            Despesas_Veterinarias_LimiteAnual = "Por doença ou acidente: 500 €",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "Sem franquia",
                            Eutanasia_Funeral_LimiteAnual = "200 €",
                            Guarda_Franquia = "Sem franquia",
                            Guarda_LimiteAnual = "500 €",
                            ImagemSeguradora = "",
                            Nome = "Europ Assistance",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 77,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "",
                            Responsabilidade_Civil_LimiteAnual = "50.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Acesso à rede"
                        },
                        new
                        {
                            ID = 4,
                            Cirurgia_Franquia = "30%",
                            Cirurgia_LimiteAnual = "1.000 €",
                            Coberturas = "Responsabilidade Civil, Despesas veterinárias e Cirurgia",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6272),
                            Desaparecimento_Franquia = "",
                            Desaparecimento_LimiteAnual = "Cobertura não disponível",
                            Designacao = "Pet 3 - Exclusivo subscritores",
                            Despesas_Veterinarias_Franquia = "30%",
                            Despesas_Veterinarias_LimiteAnual = "250 €",
                            Destaque = "Os subscritores da DECO PROTESTE beneficiam de um desconto de 10% no prémio ao longo de todo o contrato. O prémio apresentado pressupõe um animal do género masculino e não esterilizado. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "",
                            Eutanasia_Funeral_LimiteAnual = "Eutanásia incluída nas despesas médicas; Funeral excluído.",
                            Guarda_Franquia = "",
                            Guarda_LimiteAnual = "Cobertura não disponível",
                            ImagemSeguradora = "",
                            Nome = "Fidelidade",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 76,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "10% danos, mín. 50 €",
                            Responsabilidade_Civil_LimiteAnual = "75.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Cobertura opcional"
                        },
                        new
                        {
                            ID = 5,
                            Cirurgia_Franquia = "30%",
                            Cirurgia_LimiteAnual = "1.000 €",
                            Coberturas = "Responsabilidade Civil, Despesas veterinárias e Cirurgia",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6284),
                            Desaparecimento_Franquia = "",
                            Desaparecimento_LimiteAnual = "Cobertura não disponível",
                            Designacao = "Pet 3",
                            Despesas_Veterinarias_Franquia = "30%",
                            Despesas_Veterinarias_LimiteAnual = "250 €",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "",
                            Eutanasia_Funeral_LimiteAnual = "Eutanásia incluída nas despesas médicas; Funeral excluído.",
                            Guarda_Franquia = "",
                            Guarda_LimiteAnual = "Cobertura não disponível",
                            ImagemSeguradora = "",
                            Nome = "Fidelidade",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 76,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "10% danos, mín. 50 €",
                            Responsabilidade_Civil_LimiteAnual = "75.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Cobertura opcional"
                        },
                        new
                        {
                            ID = 6,
                            Cirurgia_Franquia = "10%",
                            Cirurgia_LimiteAnual = "Por acidente ou doença: 1000 €; Máx. 1 750 € ano; Exclusivo rede",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Cirurgia, Eutanásia, Desaparecimento e Guarda do Animal",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6292),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "150 €",
                            Designacao = "NPET TOP DECO - Exclusivo subscritores",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Acesso à rede",
                            Destaque = "Produto exclusivo para subscritores da DECO PROTESTE. O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "Sem franquia",
                            Eutanasia_Funeral_LimiteAnual = "250 €",
                            Guarda_Franquia = "Sem franquia",
                            Guarda_LimiteAnual = "200 €",
                            ImagemSeguradora = "",
                            Nome = "NSeguros",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 76,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "50 €",
                            Responsabilidade_Civil_LimiteAnual = "50.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Acesso à rede"
                        },
                        new
                        {
                            ID = 7,
                            Cirurgia_Franquia = "30%",
                            Cirurgia_LimiteAnual = "2.250 €",
                            Coberturas = "Responsabilidade Civil, Despesas veterinárias, Vacinas e Cirurgia",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6296),
                            Desaparecimento_Franquia = "",
                            Desaparecimento_LimiteAnual = "Cobertura não disponível",
                            Designacao = "Pet Vital - Exclusivo subscritores",
                            Despesas_Veterinarias_Franquia = "30%",
                            Despesas_Veterinarias_LimiteAnual = "750 €",
                            Destaque = "Os subscritores da DECO PROTESTE beneficiam de um desconto de 10% no prémio ao longo de todo o contrato. O prémio apresentado pressupõe um animal do género masculino e não esterilizado. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "",
                            Eutanasia_Funeral_LimiteAnual = "Eutanásia incluída nas despesas médicas; Funeral opcional",
                            Guarda_Franquia = "",
                            Guarda_LimiteAnual = "Cobertura não disponível",
                            ImagemSeguradora = "",
                            Nome = "Fidelidade",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 76,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "10% danos, mín. 50 €",
                            Responsabilidade_Civil_LimiteAnual = "200.000 €",
                            Vacinas_Franquia = "30%",
                            Vacinas_LimiteAnual = "100 €"
                        },
                        new
                        {
                            ID = 8,
                            Cirurgia_Franquia = "30%",
                            Cirurgia_LimiteAnual = "2.250 €",
                            Coberturas = "Responsabilidade Civil, Despesas veterinárias, Vacinas e Cirurgia",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6301),
                            Desaparecimento_Franquia = "",
                            Desaparecimento_LimiteAnual = "Cobertura não disponível",
                            Designacao = "Pet Vital",
                            Despesas_Veterinarias_Franquia = "30%",
                            Despesas_Veterinarias_LimiteAnual = "750 €",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "",
                            Eutanasia_Funeral_LimiteAnual = "Eutanásia incluída nas despesas médicas; Funeral opcional",
                            Guarda_Franquia = "",
                            Guarda_LimiteAnual = "Cobertura não disponível",
                            ImagemSeguradora = "",
                            Nome = "Fidelidade",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 76,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "10% danos, mín. 50 €",
                            Responsabilidade_Civil_LimiteAnual = "200.000 €",
                            Vacinas_Franquia = "30%",
                            Vacinas_LimiteAnual = "100 €"
                        },
                        new
                        {
                            ID = 9,
                            Cirurgia_Franquia = "10% rede, 30% fora rede",
                            Cirurgia_LimiteAnual = "Por doença: 300 €. Por acidente: 300 €",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Despesas médicas por acidente, Cirurgia, Eutanásia e Desaparecimento",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6307),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "50 €",
                            Designacao = "Netanimais Domésticos @Média",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Por doença: acesso à rede. Por acidente: 300 €",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "Sem franquia",
                            Eutanasia_Funeral_LimiteAnual = "100 €",
                            Guarda_Franquia = "",
                            Guarda_LimiteAnual = "Cobertura não disponível",
                            ImagemSeguradora = "",
                            Nome = "Mapfre",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 74,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "50 €",
                            Responsabilidade_Civil_LimiteAnual = "50.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Cobertura opcional"
                        },
                        new
                        {
                            ID = 10,
                            Cirurgia_Franquia = "10 ou 30%, consoante o tipo de cirurgia",
                            Cirurgia_LimiteAnual = "4 600 € por sinistro e 14 000 € por anuidade; Limites máximos por tipo de cirurgia",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Cirurgia, Despesas de internamento, Desaparecimento e Guarda do Animal",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6314),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "500 €; Máx. 30 dias",
                            Designacao = "Petki Gold",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Acesso à rede",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "",
                            Eutanasia_Funeral_LimiteAnual = "Cobertura não disponível",
                            Guarda_Franquia = "Sem franquia",
                            Guarda_LimiteAnual = "500 €",
                            ImagemSeguradora = "",
                            Nome = "Europ Assistance",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 74,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "",
                            Responsabilidade_Civil_LimiteAnual = "50.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Acesso à rede"
                        },
                        new
                        {
                            ID = 11,
                            Cirurgia_Franquia = "10% rede, 30% fora rede",
                            Cirurgia_LimiteAnual = "Por doença: 300 € Por acidente: 300 €",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Cirurgia, Eutanásia e Desaparecimento",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6318),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "50 €",
                            Designacao = "Cães e Gatos Conforto",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Acesso à rede",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "Sem franquia",
                            Eutanasia_Funeral_LimiteAnual = "200 €",
                            Guarda_Franquia = "",
                            Guarda_LimiteAnual = "Cobertura não disponível",
                            ImagemSeguradora = "",
                            Nome = "Seguros Continente",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 73,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "50 €",
                            Responsabilidade_Civil_LimiteAnual = "50.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Oferta vacina anual"
                        },
                        new
                        {
                            ID = 12,
                            Cirurgia_Franquia = "10%",
                            Cirurgia_LimiteAnual = "Por acidente ou doença: 1000 €; Máx. 1 750 € ano; Exclusivo rede",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Cirurgia, Desaparecimento e Guarda do animal",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6323),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "150 €",
                            Designacao = "NPET TOP - Exclusivo subscritores",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Acesso à rede",
                            Destaque = "Os subscritores da DECO PROTESTE usufruem de um desconto. O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "",
                            Eutanasia_Funeral_LimiteAnual = "Cobertura não disponível",
                            Guarda_Franquia = "Sem franquia",
                            Guarda_LimiteAnual = "200 €",
                            ImagemSeguradora = "",
                            Nome = "NSeguros",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 67,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "50 €",
                            Responsabilidade_Civil_LimiteAnual = "50.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Acesso à rede"
                        },
                        new
                        {
                            ID = 13,
                            Cirurgia_Franquia = "10%",
                            Cirurgia_LimiteAnual = "Por acidentes ou doença: 500 €. Exclusivo rede",
                            Coberturas = "Responsabilidade Civil, Acesso à rede veterinária, Cirurgia, Desaparecimento e Guarda do animal",
                            DateEdicao = new DateTime(2023, 8, 14, 12, 40, 26, 430, DateTimeKind.Local).AddTicks(6328),
                            Desaparecimento_Franquia = "Sem franquia",
                            Desaparecimento_LimiteAnual = "150 €",
                            Designacao = "NPET TOP",
                            Despesas_Veterinarias_Franquia = "",
                            Despesas_Veterinarias_LimiteAnual = "Acesso à rede",
                            Destaque = "O prémio apresentado pressupõe um animal de companhia do género masculino, não esterilizado, sem histórico de doenças ou cirurgias e que não representa risco para a segurança por comportamento agressivo. Se o seu animal não corresponde a estas características, o prémio poderá variar.",
                            Eutanasia_Funeral_Franquia = "",
                            Eutanasia_Funeral_LimiteAnual = "Cobertura não disponível",
                            Guarda_Franquia = "Sem franquia",
                            Guarda_LimiteAnual = "200 €",
                            ImagemSeguradora = "",
                            Nome = "NSeguros",
                            Observacoes = "Considerado cão de companhia, sem doenças ou cirurgias preexistentes, sem histórico de ofensas à integridade física de uma pessoa ou de outro animal, não esterilizado.",
                            Qualidade = 67,
                            QualidadeDesc = "Boa Qualidade",
                            Responsabilidade_Civil_Franquia = "50 €",
                            Responsabilidade_Civil_LimiteAnual = "50.000 €",
                            Vacinas_Franquia = "",
                            Vacinas_LimiteAnual = "Acesso à rede"
                        });
                });

            modelBuilder.Entity("DECO_Pets.Models.Species", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("NameSpecies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            NameSpecies = "Cão"
                        },
                        new
                        {
                            ID = 2,
                            NameSpecies = "Gato"
                        });
                });

            modelBuilder.Entity("DECO_Pets.Models.Weight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("WeightDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Weights");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            WeightDescription = "Até 5Kg"
                        },
                        new
                        {
                            ID = 2,
                            WeightDescription = "Entre 5Kg e 10Kg"
                        },
                        new
                        {
                            ID = 3,
                            WeightDescription = "Entre 11Kg e 20Kg"
                        },
                        new
                        {
                            ID = 4,
                            WeightDescription = "Entre 21Kg e 45Kg"
                        },
                        new
                        {
                            ID = 5,
                            WeightDescription = "Mais de 45Kg"
                        },
                        new
                        {
                            ID = 6,
                            WeightDescription = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DECO_Pets.Models.Dados", b =>
                {
                    b.HasOne("DECO_Pets.Models.Age", "Age")
                        .WithMany()
                        .HasForeignKey("AgeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DECO_Pets.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DECO_Pets.Models.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DECO_Pets.Models.Weight", "Weight")
                        .WithMany()
                        .HasForeignKey("WeightID");

                    b.Navigation("Age");

                    b.Navigation("Race");

                    b.Navigation("Species");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("DECO_Pets.Models.Premios", b =>
                {
                    b.HasOne("DECO_Pets.Models.Dados", "Dados")
                        .WithMany()
                        .HasForeignKey("DadosID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DECO_Pets.Models.Seguradora", "Seguradora")
                        .WithMany()
                        .HasForeignKey("SeguradoraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dados");

                    b.Navigation("Seguradora");
                });

            modelBuilder.Entity("DECO_Pets.Models.Race", b =>
                {
                    b.HasOne("DECO_Pets.Models.Species", "Species")
                        .WithMany()
                        .HasForeignKey("EspeciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
